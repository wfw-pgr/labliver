##############################################################
面検出タリー "t-cross" の使い方
##############################################################

=========================================================
t-cross とは
=========================================================

* 指定した面における **粒子のカウント** を 出力するタリー．
* 面を通過する単位面積あたりの粒子数を示す物理量が計算できる． **current** と **flux** の２つのカウント方法がある．

  + **current** ：面を通過する総粒子数をカウント．どんな方向でも :blue:`１個の粒子は１個` としてカウント．
  + **flux** ：面に垂直な方向への通過を1としてカウント．偏角がある場合は :blue:`1/cosθ` で重み付けし、面に対して曲がった通過は薄くカウントする．

* カウントは :blue:`単位面積あたり` を出力．各面の面積で規格化．

  + (mesh=reg時) 面積を :blue:`陽に計算しなければならない` （複雑形状だとモンテカルロ計算が必要）．
  + (mesh=r-z,xyzなど) 自動的に計算．



    
=========================================================
通過粒子数を計算する
=========================================================

例えば、 **何個の粒子が通ったか** を測定したいとき．

おすすめ設定は下記．

* 出力モードは :blue:`"output=current"`
* 単位は :blue:`"unit=1" ( 1/cm2/source )`
* meshモードに合わせて面積を指定していく．
  
  + "mesh=reg" ならば、area サブセクションは :blue:`1.0 固定` ( 面積で割らずに通過した粒子数を出力 )でよい．
  + "mesh=xyz, r-z etc." ならば、面積は自動計算されて単位面積当たりカウントになってしまう．ので、multiplierで各面ごとの面積をかけていく．もしくは、 :blue:`pythonでポスト処理` する．
  + 例えば、 mesh=xyzなどで、面積が同じ面で検出している場合は、 "factor = 1.0/（面積）" として、factor倍してしまってもよい．


---------------------------------------------------------
t-cross の指定例
---------------------------------------------------------

.. literalinclude:: ../code/tcross__example.inp


