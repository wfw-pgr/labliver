#################################################################
RANS ( Reynolds Averaged Navier-Stokes ) ： k-εモデルについて
#################################################################

=========================================================
RANS ( Reynolds Averaged Navier-Stokes ) について
=========================================================

流体の基本方程式はNavier-Stokes方程式(NS方程式)である．
NS方程式は、対流項 :math:`v \cdot \nabla v` の影響で、短波長成分が生成される．例えば、ある空間的な流体波動、 :math:`v=a \sin kx` は、 

.. math::

   v \cdot \nabla v = a^2 \sin kx \cos kx = 2 a^2 \sin 2 kx

となるため、もとの２倍の波数の波が、対流項によるカップリングで生じてしまう．

これは、低波数モード（長波長）のエネルギーから、高波数（＝短波長）のモードへとエネルギーカスケードすることを意味する．実際は、高波数モードでは、非線形的に粘性項による熱化が進むため、低波数→高波数→散逸、というエネルギーカスケードが生じる（プラズマでは逆のカスケードが生じうる！）．数値シミュレーションとしては、適度な数値的拡散がないと、高波数モードが無限に生じてしまうため、乱流を含めたシミュレーションには、難しさがある．

この高波数構造（＝渦）を、数値計算することを考える．近似度合いに応じて、いくつかの数値モデルがあり、以下に大別される．

* DNS （直接数値計算：Direct Numerical Simulation）
* LES （大局渦構造計算：Large Eddy Simulation）
* RANS （レイノルズ平均ナビエ・ストークスモデル：Reynolds Averaged Navier-Stokes）

RANSは、時間・空間的に、渦と流れを分けて、別の輸送方程式として取り扱う．RANSの特徴は、

* 時間的に定常な解を解くのが得意
* 剥離などの時空間的にカップルした構造を計算するのが苦手

RANSのモデルに、

* :math:`k-\epsilon` モデル
* :math:`k-\omega` モデル

などがある．


=========================================================
k-εモデル
=========================================================

---------------------------------------------------------
k-εモデルの特徴
---------------------------------------------------------

k-εモデルは、通常のNS方程式に加えて、渦の運動エネルギー k、及び、渦のエネルギー散逸 ε も流れによって輸送するとみなして、流体と渦の時間的変化を解くモデルである．

.. csv-table:: **k および ε**
   :widths: 30, 70
   :width:  800px
   
   "k", "輸送される渦エネルギー(Kinetic Energy)"
   "ε", "輸送される渦の散逸度(Energy Dissipation)"


k-εモデルの特徴を以下にまとめる．
   
.. csv-table:: **k-εモデルの特徴**
   :widths: 30, 70
   :width:  800px

   "長所", "簡便かつ安定に解くことができ、工学的応用が容易なモデル"
   "", "特別な追加パラメータ・近似等を用意しなくてよい"
   "短所", "曲率を持った物体表面や、粘性低層のシミュレーションは近似である"
   "", "k, εの値はあくまでスケーリングから持ってきたアバウトな値であるため、精度を出しにくい"

   
---------------------------------------------------------
基本方程式
---------------------------------------------------------


=========================================================
k-εモデルのパラメータの決定
=========================================================

使用する k, εの境界条件や初期条件の値の決定は、以下の式を用いて行える[1-3]．


---------------------------------------------------------
水力直径で測ったReynolds数 ( :math:`Re_{[d_h]}` )
---------------------------------------------------------

.. math::

   Re_{[d_h]} = \dfrac{ \rho U d_h  }{ \mu } = \dfrac{ U d_h }{ \nu }

ここで、 :math:`\rho` は質量密度 [kg/m3]、 :math:`d_h` は水力直径 [m]、 :math:`U` は平均流速 [m/s]、 :math:`\mu` は粘度 [Pa s]、  :math:`\nu=\mu / \rho` は動粘度 [m2/s] である．



---------------------------------------------------------
渦強度 ( I )
---------------------------------------------------------

.. math::

   I = 0.16 Re_{[d_h]}^{-\dfrac{1}{8}}


---------------------------------------------------------
渦の特徴長さ ( l )
---------------------------------------------------------

.. math::

   l = 0.038 d_h


---------------------------------------------------------
渦の運動エネルギー ( k )
---------------------------------------------------------

.. math::

   k = \dfrac{3}{2} ( U I )^2


---------------------------------------------------------
渦のエネルギー散逸 ( ε )
---------------------------------------------------------

.. math::

   \epsilon = C_{\mu}^{3/4} \dfrac{ k^{3/2 } }{ l }
   

---------------------------------------------------------
シミュレーションへの入力パラメータ計算
---------------------------------------------------------

例えば、以下プログラムを用いて、計算し、k、εの初期値、境界値を固定値で指定する．（固定値（決め打ち）で良いのかはしらない．）


.. literalinclude:: ../../code/fluid/k_epsilon_model/calculate__k_epsilon_coef.py
   		    :caption:  calculate__k_epsilon_coef.py
   		    :language: python

                               
.. literalinclude:: ../../code/fluid/k_epsilon_model/parameter.conf
                    :caption:  example of input : parameter.conf

                               
.. image:: ../../image/fluid/k_epsilon_model/output.png
           :width:  600px
           :align:  center


   
=========================================================
Reference 
=========================================================

* [1] CFD online k epsilon model ( https://www.cfd-online.com/Wiki/Turbulence_free-stream_boundary_conditions )
* [2] CFD online turbulence intensity ( https://www.cfd-online.com/Wiki/Turbulence_intensity )
* [3] CFD online turbulence length scale ( https://www.cfd-online.com/Wiki/Turbulent_length_scale )
